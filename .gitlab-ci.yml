stages:
  - build
  - deploy

# 打包任务
build-gateway-job:
  stage: build
  # 指定标签，只要具有该标签的runner才会执行
  tags:
    - gateway
  script:
    # 使用Maven打包
    - mvn clean install -pl gateway -am -Dmaven.test.skip=true
    # 将jar包、Dockerfile、运行脚本复制到指定目录
    # gateway模块
    - cp gateway/target/*.jar /mydata/build/gateway/gateway.jar
    - cp gateway/Dockerfile /mydata/build/gateway/Dockerfile
    - cp gateway/run.sh /mydata/build/gateway/run.sh
  # 每次提交代码到gitlab都不会自动打包部署，手动执行
  when: manual

# 打包任务
build-web-demo-job:
  stage: build
  # 指定标签，只要具有该标签的runner才会执行
  tags:
    - web-demo
  script:
    # 使用Maven打包
    - mvn clean install -pl web-demo -am -Dmaven.test.skip=true
    # 将jar包、Dockerfile、运行脚本复制到指定目录
    # web模块
    - cp web-demo/target/*.jar /mydata/build/web/web.jar
    - cp web-demo/Dockerfile /mydata/build/web/Dockerfile
    - cp web-demo/run.sh /mydata/build/web/run.sh
  # 每次提交代码到gitlab都不会自动打包部署，手动执行
  when: manual

# 部署任务
deploy-gateway-job:
  stage: deploy
  tags:
    - gateway
  script:
    # 进入指定目录并执行运行脚本
    - cd /mydata/build/gateway
    - chmod +x run.sh
    - ./run.sh
  # 每次提交代码到gitlab都不会自动打包部署，手动执行
  when: manual

# 部署任务
deploy-web-demo-job:
  stage: deploy
  tags:
    - web-demo
  script:
    # 进入指定目录并执行运行脚本
    - cd /mydata/build/web
    - chmod +x run.sh
    - ./run.sh
  # 每次提交代码到gitlab都不会自动打包部署，手动执行
  when: manual